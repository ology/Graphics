#!/usr/bin/env perl
use strict;
use warnings;

use Parse::IRCLog;
use GD::Graph::Polar;
use Getopt::Long;
use List::MoreUtils qw( any );
use DateTime;
use DateTime::Format::DateParse;

die usage() unless @ARGV;

my $log;  # Log file to parse
my $show; # Nicks to show
my $hide; # Nicks to hide
my $label = 0; # Show nick labels;
my $start; # Initial timestamp
my $begin; # Beginning time to show
my $end;   # Time to stop showing
GetOptions(
    'log=s'   => \$log,
    'show:s@' => \$show,
    'hide:s@' => \$hide,
    'label'   => \$label,
    'start=s' => \$start,
    'begin=s' => \$begin,
    'end=s'   => \$end,
) or print usage(), "\n";

my $start_dt = $start ? DateTime::Format::DateParse->parse_datetime($start) : DateTime->now;
my $begin_dt = $begin ? DateTime::Format::DateParse->parse_datetime($begin) : $start_dt;
my $end_dt   = $end ? DateTime::Format::DateParse->parse_datetime($end) : undef;

my $irc = Parse::IRCLog->parse($log);

# People seen
my $nicks;

# Date-time increment for timestamping
my $counter_dt = DateTime->new(
    year       => $start_dt->year,
    month      => $start_dt->month,
    day        => $start_dt->day,
    hour       => 0,
    minute     => 0,
    second     => 0,
    time_zone  => 'local',
);

# Capture the number of occurances
for my $event ( $irc->events )
{
    $counter_dt->add( days => 1 ) if $event->{text} =~ /^--- Day changed/;

    my $nick = $event->{nick};
    next unless $nick;

    next if any { $_ eq $nick } @$hide;

    my ( $hours, $mins ) = split /:/, $event->{timestamp};

    my $ts = DateTime->new(
        year       => $counter_dt->year,
        month      => $counter_dt->month,
        day        => $counter_dt->day,
        hour       => $hours,
        minute     => $mins,
        second     => 0,
        time_zone  => 'local',
    );

    next if $begin && DateTime->compare( $ts, $begin_dt ) == -1;
    last if $end && DateTime->compare( $ts, $end_dt ) == 1;

    push @{ $nicks->{$nick}{occurance} }, $event->{timestamp};
}

# Capture directed conversation
for my $event ( $irc->events )
{
    my $nick = $event->{nick};
    next unless $nick;
    ( my $at_nick = $event->{text} ) =~ s/^(\w+):\s.+$/$1/;
    push @{ $nicks->{$nick}{at_nick} }, $at_nick
        if exists $nicks->{$nick} && exists $nicks->{$at_nick};
}

# Compute coordinates
my ( $theta, $r, $maxr );
for my $nick ( keys %$nicks )
{
    $r = @{ $nicks->{$nick}{occurance} };
    $maxr = $r if !$maxr || $r > $maxr;
    $theta = $nicks->{$nick}{occurance}[-1];
    $theta = time2degrees($theta);
    $nicks->{$nick}{coordinate} = [ $r, $theta ];
}

my $g = GD::Graph::Polar->new(
    size => 600,
    radius => $maxr,
    ticks => 20,
);

# Add datapoints, labels & edges
@$show = keys %$nicks unless $show && @$show;
for my $nick ( @$show )
{
    my $r = $maxr - $nicks->{$nick}{coordinate}[0] + 1;
    my $t = $nicks->{$nick}{coordinate}[1];
    add_datapoint( $r, $t, $nick, $nicks, $label );

    for my $at_nick ( @{ $nicks->{$nick}{at_nick} } )
    {
        my $atr = $maxr - $nicks->{$at_nick}{coordinate}[0] + 1;
        my $att = $nicks->{$at_nick}{coordinate}[1];
        add_datapoint( $atr, $att, $at_nick, $nicks, $label );
        # TODO Color line based on how many times the nick occurs
        $g->addLine( $r, $t, $atr, $att );
    }
}

print $g->draw;

sub usage {
"perl $0 --log chat.log
         [--label]
         [--show Tarzan --show Jane] [--hide Bot --hide Fool]
         [--start '2000-01-01 00:00:00']
         [--begin '2000-01-05 00:00:00'] [--end '2000-01-06 00:00:00']

* start sets the initial timestamp
* begin sets the timestamp from which to being recording
* end sets the timestamp from which to stop recording

If there are no start, begin or end points, the entire log is shown.
If there is no start set, the current date is used.
If there is no begin set, the start of the log is shown.
If there is no end point set, the end of the log is shown."
}

sub add_datapoint
{
    my ( $r, $t, $nick, $nicks, $label ) = @_;
    return if $nicks->{$nick}{drawn};
    $g->addPoint( $r, $t );
    $g->addString( $r, $t, $nick ) if $label;
    $nicks->{$nick}{drawn}++;
}

sub time2degrees
{
    # HH:MM:SS
    my( $h, $m ) = split /:/, shift;

    # Convert minutes to degrees
    $m += $h * 60;
    my $degrees = $m * 360 / 1440; # By proportion: deg/360=min/1440 per day

    return $degrees;
}
__END__
:!perl % --log perl.log --start '2000-01-01' --begin '2000-01-04' --end '2000-01-05' --label > vizirc.png
