#!/usr/bin/env perl
use strict;
use warnings;

use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(Data-Turtle);
use Data::Turtle ();
use SVG qw(title);

use constant SIDE  => 60;
use constant SHORT => SIDE / 2;
use constant LONG  => SIDE * sqrt(3);

my ($width, $height) = (700, 500);
my $stroke = 'black';
my $fill = 'white';

my $svg = SVG->new(
    width  => $width,
    height => $height,
);
$svg->title()->cdata('Data::Turtle');
my $style = $svg->group(
    id    => 'style-group',
    style => {
        stroke => $stroke,
        fill   => $fill,
    },
);
$style->rectangle(
    id     => 'rectangle-frame',
    x      => 0,
    y      => 0,
    width  => $width,
    height => $height,
);

my $turtle = Data::Turtle->new(
    width   => $width,
    height  => $height,
    x       => LONG,
    y       => LONG,
    heading => 0,
);

my $rows = 3;
for my $row (1 .. $rows) {
    hex_kite_grid($style, $turtle, $row, 1);
    # move to the next lower starting point
    $turtle->right(90);
    $turtle->forward(LONG);
    $turtle->left(90);
}

$turtle->left(90);
$turtle->forward(LONG * $rows + (LONG / 2));
$turtle->right(90);
$turtle->forward(SIDE + SHORT);
for my $row (1 .. $rows + 1) {
    hex_kite_grid($style, $turtle, $row, 2);
    # move to the next lower starting point
    $turtle->right(90);
    $turtle->forward(LONG);
    $turtle->left(90);
}

$turtle->left(90);
$turtle->forward(LONG * $rows + (LONG / 2));
$turtle->right(90);
$turtle->forward(SIDE + SHORT);
for my $row (1 .. $rows) {
    hex_kite_grid($style, $turtle, $row, 3);
    # move to the next lower starting point
    $turtle->right(90);
    $turtle->forward(LONG);
    $turtle->left(90);
}

$turtle->left(90);
$turtle->forward(LONG * $rows + (LONG / 2));
$turtle->right(90);
$turtle->forward(SIDE + SHORT);
for my $row (1 .. $rows + 1) {
    hex_kite_grid($style, $turtle, $row, 4);
    # move to the next lower starting point
    $turtle->right(90);
    $turtle->forward(LONG);
    $turtle->left(90);
}

print $svg->xmlify;

# clockwise from top-left
sub hex_kite_grid {
    my ($style, $turtle, $col, $row, $x, $y) = @_;

    if ($x && $y) {
        $turtle->goto($x, $y);
    }

    for my $i (1 .. 6) {
        my @line = $turtle->forward(SIDE);
        $style->line(
            id => "line-$col.$row.$i",
            x1 => $line[0],
            y1 => $line[1],
            x2 => $line[2],
            y2 => $line[3],
        );
        $turtle->right(60);
    }

    for my $spoke (1 .. 3) {
        $turtle->forward(SHORT);
        $turtle->right(90);
        my @line = $turtle->forward(LONG);
        $style->line(
            id => "line-$col.$row.spoke-$spoke",
            x1 => $line[0],
            y1 => $line[1], 
            x2 => $line[2],
            y2 => $line[3],
        );

        $turtle->right(90);
        $turtle->forward(SHORT);
        $turtle->right(60);
    }
}
