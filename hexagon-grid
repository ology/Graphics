#!/usr/bin/env perl
use strict;
use warnings;

use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(Data-Turtle);
use Data::Turtle ();
use SVG qw(title);

my $rows = shift || 4;
my $cols = shift || 7;

my $side = shift || 60;
my $short = $side / 2;
my $long  = $side * sqrt(3);

my ($width, $height) = (700, 600);
my $stroke = 'gray';
my $fill = 'white';

my $svg = SVG->new(
    width  => $width,
    height => $height,
);
$svg->title()->cdata('Hexagonal Kites');
my $style = $svg->group(
    id    => 'style-group',
    style => {
        stroke => $stroke,
        fill   => $fill,
    },
);
$style->rectangle(
    id     => 'rectangle-frame',
    x      => 0,
    y      => 0,
    width  => $width,
    height => $height,
);

my $turtle = Data::Turtle->new(
    width   => $width,
    height  => $height,
    x       => $short + $short / 2,
    y       => $side,
    heading => 0,
);

for my $col (1 .. $cols) {
    my $extra = $col % 2 ? 0 : 1;
    for my $row (1 .. $rows + $extra) {
        hex_kite_grid($style, $turtle, $row, $col);
        # move to the next lower starting point
        $turtle->right(90);
        $turtle->forward($long);
        $turtle->left(90);
    }

    # move to the next upper starting point
    $turtle->left(90);
    $turtle->forward($long * $rows + ($long / 2));
    $turtle->right(90);
    $turtle->forward($side + $short);
}

print $svg->xmlify;

# clockwise from top-left
sub hex_kite_grid {
    my ($style, $turtle, $col, $row) = @_;

    for my $i (1 .. 6) {
        my @line = $turtle->forward($side);
        $style->line(
            id => "line-$col.$row.$i",
            x1 => $line[0],
            y1 => $line[1],
            x2 => $line[2],
            y2 => $line[3],
        );
        $turtle->right(60);
    }

    for my $spoke (1 .. 3) {
        $turtle->forward($short);
        $turtle->right(90);
        my @line = $turtle->forward($long);
        $style->line(
            id => "line-$col.$row.spoke-$spoke",
            x1 => $line[0],
            y1 => $line[1], 
            x2 => $line[2],
            y2 => $line[3],
        );

        $turtle->right(90);
        $turtle->forward($short);
        $turtle->right(60);
    }
}
