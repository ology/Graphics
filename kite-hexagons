#!/usr/bin/env perl
use strict;
use warnings;

use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(Data-Turtle);
use Data::Turtle ();
use SVG qw(title);

use constant SIDE  => 60;
use constant SHORT => SIDE / 2;
use constant LONG  => SIDE * sqrt(3) / 2;

my ($width, $height) = (500, 500);
my $stroke = 'black';
my $fill = 'white';

my $svg = SVG->new(
    width  => $width,
    height => $height,
);
$svg->title()->cdata('Data::Turtle');
my $style = $svg->group(
    id    => 'style-group',
    style => {
        stroke => $stroke,
        fill   => $fill,
    },
);
$style->rectangle(
    id     => 'rectangle-frame',
    x      => 0,
    y      => 0,
    width  => $width,
    height => $height,
);

my $turtle = Data::Turtle->new(
    width   => $width,
    height  => $height,
    x       => SIDE,
    y       => SIDE,
    heading => 0,
);

$turtle->pen_down;

my @line = $turtle->forward(SHORT);
    $style->line(
        id => "line-1",
        x1 => $line[0],
        y1 => $line[1],
        x2 => $line[2],
        y2 => $line[3],
    );

$turtle->right(90);

@line = $turtle->forward(LONG);
    $style->line(
        id => "line-2",
        x1 => $line[0],
        y1 => $line[1],
        x2 => $line[2],
        y2 => $line[3],
    );

$turtle->right(120);

@line = $turtle->forward(LONG);
    $style->line(
        id => "line-3",
        x1 => $line[0],
        y1 => $line[1],
        x2 => $line[2],
        y2 => $line[3],
    );

$turtle->right(90);

@line = $turtle->forward(SHORT);
    $style->line(
        id => "line-4",
        x1 => $line[0],
        y1 => $line[1],
        x2 => $line[2],
        y2 => $line[3],
    );

print $svg->xmlify;
