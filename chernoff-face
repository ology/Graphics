#!/usr/bin/env perl
use strict;
use warnings;

use GD::Simple;
use List::Util qw( min max );
use Text::CSV;

# Get the data file from the command-line
my $file = shift || die "Usage: perl $0 /data/file.csv\n";

# Open the data file for reading
open my $data, '<:encoding(utf8)', $file
    or die "Can't read $file: $!";

# Instantiate a CSV object
my $csv = Text::CSV->new( { binary => 1 } )
    or die "Can't use CSV: ", Text::CSV->error_diag();

# Get the number of data rows and the min/max of the columns
my $nrow = 0;
my %minmax;
while ( my $row = $csv->getline($data) ) {
    $nrow++;

    my $i = 0;
    for my $item ( @$row ) {
        $i++;
        push @{ $minmax{$i} }, $item;
    }
}
for my $key ( keys %minmax ) {
    $minmax{$key} = {
        min => min( @{ $minmax{$key} } ),
        max => max( @{ $minmax{$key} } ),
    };
}

# Reset the data file to read in again
seek $data, 0, 0;

# Render a data row into a Chernoff face
my $i = 0;
while ( my $row = $csv->getline($data) ) {
    $i++;

    my ( $headx, $mouthx, $eyesx, $eyess, $noses ) = @$row;

    # Canvas
    my $width  = 400;
    my $height = 250;
    my $img = GD::Simple->new( $width, $height );
    $img->penSize( 1, 1 );
    $img->bgcolor(undef);
    $img->rectangle( 0, 0, $width - 1, $height - 1 );

    # Head
    my $bottom = 250;
    my $top    = 30;
    $headx = scale_to( $headx, $minmax{1}{min}, $minmax{1}{max}, $bottom, $top );
    $img->fgcolor('black');
    $img->moveTo( $width / 2, $height / 2 );
    $img->ellipse( $headx, 200 );

    # Mouth
    $bottom = 40;
    $top    = -60;
    $mouthx = scale_to( $mouthx, $minmax{2}{min}, $minmax{2}{max}, $bottom, $top );
    $img->fgcolor('darkred');
    my $x1 = ( $width - $width / 3 ) + 1 + $mouthx;
    my $x2 = ( $width / 3 ) - $mouthx;
    my $y1 = $height - $height / 3;
    $img->moveTo( $x1, $y1 );
    $img->lineTo( $x2, $y1 );

    # Eyes
    $bottom = 5;
    $top    = 55;
    $eyesx = scale_to( $eyesx, $minmax{3}{min}, $minmax{3}{max}, $bottom, $top );
    $bottom = 50;
    $top    = 5;
    $eyess = scale_to( $eyess, $minmax{4}{min}, $minmax{4}{max}, $bottom, $top );
    $img->fgcolor('darkblue');
    $x1 = ( $width / 3 ) + 1 + $eyesx;
    $y1 = $height / 3;
    $img->moveTo( $x1, $y1 );
    $img->ellipse( $eyess, $eyess );
    $x1 = ( $width - $width / 3 ) - $eyesx;
    $y1 = $height / 3;
    $img->moveTo( $x1, $y1 );
    $img->ellipse( $eyess, $eyess );

    # Nose
    my $poly = GD::Polygon->new;
    $bottom = 0;
    $top    = 36;
    $noses = scale_to( $noses, $minmax{5}{min}, $minmax{5}{max}, $bottom, $top );
    $img->fgcolor('black');
    my $defaultx = 30;
    $x1 = $width / 2;
    $y1 = $height / 3;
    $poly->addPt( $x1, $y1 );   # Top
    $x1 = ( $width / 3 ) + $defaultx + 1 + $noses;
    $y1 = $height / 2;
    $poly->addPt( $x1, $y1 );   # Left
    $x1 = ( $width - $width / 3 ) - $defaultx - $noses;
    $poly->addPt( $x1, $y1 );   # Right
    $img->polygon($poly);

    # Data
    $img->moveTo( 20, $height - 10 );
    $img->string( join ', ', map { sprintf '%.3f', $_ } @$row );

    # Write-out the image file
    my $name = sprintf '%s-%0*d.png', $0, length($nrow), $i;
    open my $fh, '>', $name or die "Can't write to $name: $!\n" ;
    binmode $fh;
    print $fh $img->png;
    close $fh;
}

# Close the CSV and data file
$csv->eof or $csv->error_diag();
close $data;

# https://stackoverflow.com/questions/5294955/how-to-scale-down-a-range-of-numbers-with-a-known-min-and-max-value
sub scale_to {
    my ( $x, $min, $max, $bottom, $top ) = @_;
    return ( ( $bottom - $top ) * ( $x - $min ) / ( $max - $min ) ) + $top;
}

__END__
# Create random data in R:
min <- 0
max <- 100
n   <- 10
df  <- data.frame( a = as.integer(trunc(runif( n, min=min, max=max ))), b = as.integer(trunc(runif( n, min=min, max=max ))), c = as.integer(trunc(runif( n, min=min, max=max ))), d = as.integer(trunc(runif( n, min=min, max=max ))), e = as.integer(trunc(runif( n, min=min, max=max ))) )
write.table(df, 'data.csv', quote = F, sep = ",", row.names = F, col.names = F)

# Create animated gif with imagemagick:
convert -delay 100 -size 400x250 chernoff-face-*.png chernoff-face.gif
