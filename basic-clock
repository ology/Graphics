#!/usr/bin/env perl
use strict;
use warnings;

# Generate a pseudo-analog clock
# Usage: perl basic-clock > clock.svg
# Hands: black=hour, blue=minute, red=second

use GD::SVG;
use Math::Trig;

use constant PI     => 2 * atan2(1,0);
use constant HALF   => PI / 2;
use constant DOUBLE => 2 * PI;

# Set the maximum polar diameter and radius.
my $diameter = shift || 200;
my $radius   = $diameter / 2;

my $clock = GD::SVG::Image->new( $diameter, $diameter );

# Set image properties.
my $trans = $clock->colorAllocate(200,200,200);
my $red   = $clock->colorAllocate(255,0,0);
my $blue  = $clock->colorAllocate(0,0,255);
my $black = $clock->colorAllocate(0,0,0);
$clock->transparent($trans);
$clock->interlaced('true');

# Add the circle to the clock.
$clock->arc( $radius, $radius, $diameter, $diameter, 0, 360, $black );

# Get polar coordinate of the current time.
my( $s, $m, $h ) = time_point();

# Draw the arms of the clock.
$clock->line( $radius, $radius, @$s, $red );
$clock->line( $radius, $radius, @$m, $blue );
$clock->line( $radius, $radius, @$h, $black );

# Render the clock.
print $clock->svg;

sub time_point {
    my( $s, $m, $h ) = (localtime)[0..2];
    warn sprintf "%02d:%02d:%02d\n", $h, $m, $s;

    # Compute the analog time equivalents.
    $s = $s / 60 * DOUBLE - HALF;
    $m = $m / 60 * DOUBLE - HALF;
    $h = $h / 12 * DOUBLE - HALF;

    # Replace the time values with polar coordinates.
    $_ = [$radius + $radius * cos $_, $radius + $radius * sin $_]
        for $s, $m, $h;
    warn join( ', ', map { sprintf "[%.2f,%.2f]", @$_ } $s, $m, $h ), "\n";

    return $s, $m, $h;
}
