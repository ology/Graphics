#!/usr/bin/env perl
use strict;
use warnings;

# Generate a simple analog clock in SVG
# Usage: perl basic-clock > clock.svg

use GD::SVG;
use Math::Trig qw(:pi);

use constant PI     => pi;
use constant HALF   => pip2;
use constant DOUBLE => pi2;
use constant FRACT  => pi2 / 12 / 60;

# All arguments optional
my ( $diameter, $hours, $minutes, $seconds ) = @ARGV;

# Set the maximum polar diameter and radius
$diameter ||= 200;
my $radius = $diameter / 2;

my $clock = GD::SVG::Image->new( $diameter, $diameter );

# Set image properties
my $trans = $clock->colorAllocate( 200, 200, 200 ); # background
my $red   = $clock->colorAllocate( 255,   0,   0 ); # second hand
my $blue  = $clock->colorAllocate(   0,   0, 255 ); # minute hand
my $grey  = $clock->colorAllocate( 127, 127, 127 ); # hour hand
my $black = $clock->colorAllocate(   0,   0,   0 ); # perimeter
$clock->transparent($trans);
$clock->interlaced('true');

# Add the circle to the clock
$clock->arc( $radius, $radius, $diameter, $diameter, 0, 360, $black );

# Indicate the hours
for my $hour (1 .. 12) {
    my ( $s, $m, $h ) = time_point( $radius, 0, 0, $hour );
    $clock->arc( @$h, 6, 6, 0, 360, $black );
}

# Get polar coordinate of the given or current time
my ( $s, $m, $h ) = time_point( $radius, $seconds, $minutes, $hours, 1 );

# Draw the arms of the clock
$clock->setThickness(8);
$clock->line( $radius, $radius, @$h, $grey );   # hour hand
$clock->setThickness(4);
$clock->line( $radius, $radius, @$m, $blue );   # minute hand
$clock->setThickness(1);
$clock->line( $radius, $radius, @$s, $red );    # second hand

# Render the clock
print $clock->svg;

sub time_point {
    my ( $radius, $s, $m, $h, $flag ) = @_;

    # Use the current time if not given.
    ( $s, $m, $h ) = ( localtime )[ 0 .. 2 ]
        unless defined $s && defined $m && defined $h;

    warn sprintf "%02d:%02d:%02d\n", $h, $m, $s;

    my $min = $m; # remember the number of minutes

    # Compute the analog time equivalents
    $s = $s / 60 * DOUBLE - HALF;
    $m = $m / 60 * DOUBLE - HALF;
    $h = $h / 12 * DOUBLE - HALF;

    # Add 1/2 degree to the hour mark for each minute
    $h += $min * FRACT if $flag;

    # Save the triple so we can handle each bit separately
    my %t = (s => $s, m => $m, h => $h);

    for my $i (qw(s m h)) {
        # Handle differring hand lengths
        my $r = $flag && $i eq 'h' ? $radius / 2 : $radius;
        # Replace the time value with a rectangular coordinate
        $t{$i} = [
            $radius + $r * cos $t{$i},
            $radius + $r * sin $t{$i}
        ];
    }

    warn join(', ', map { sprintf "[%.2f,%.2f]", @$_ } @t{qw(s m h)}), "\n";

    return @t{qw(s m h)};
}
