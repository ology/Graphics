#!/usr/bin/env perl

# Draw hexagonal graph paper with asterisk "spokes" defining "kites."
# Write-up: https://ology.github.io/2023/04/30/of-hexagons-kites-and-tiles/
# Ex:
# perl hexagon-grid --r=16 --c=22 --side=20 --stroke=lightblue > hex.svg

use strict;
use warnings;

use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(Data-Turtle); # local author lib
use Data::Turtle ();
use Getopt::Long qw(GetOptions);
use SVG qw(title);

my %opts = (
    rows   => 4,
    cols   => 7,
    side   => 60,
    width  => 700,
    height => 600,
    stroke => 'gray',
    fill   => 'white',
);
GetOptions( \%opts,
    'rows=i',
    'cols=i',
    'side=i',
    'width=i',
    'height=i',
    'stroke=s',
    'fill=s',
) or die 'Problem getting command options';

my $short = $opts{side} / 2;
my $long  = $opts{side} * sqrt(3);

my $svg = SVG->new(
    width  => $opts{width},
    height => $opts{height},
);
$svg->title()->cdata('Hexagonal Kite Grid');
my $style = $svg->group(
    id    => 'style-group',
    style => {
        stroke => $opts{stroke},
        fill   => $opts{fill},
    },
);
$style->rectangle(
    id     => 'rectangle-frame',
    x      => 0,
    y      => 0,
    width  => $opts{width},
    height => $opts{height},
);

my $turtle = Data::Turtle->new(
    x       => $short + $short / 2,
    y       => $opts{side},
    width   => $opts{width},
    height  => $opts{height},
    heading => 0,
);

my $count = time();

for my $col (1 .. $opts{cols}) {
    my $extra = $col % 2 ? 0 : 1;

    for my $row (1 .. $opts{rows} + $extra) {
        $count = hex_kite_grid($style, $turtle, $count);

        # move to the next lower starting point
        $turtle->right(90);
        $turtle->forward($long);
        $turtle->left(90);
    }

    # move to the next upper starting point
    $turtle->left(90);
    $turtle->forward($long * $opts{rows} + ($long / 2));
    $turtle->right(90);
    $turtle->forward($opts{side} + $short);
}

print $svg->xmlify;

# clockwise from top-left
sub hex_kite_grid {
    my ($style, $turtle, $count) = @_;

    for my $i (1 .. 6) {
        my @line = $turtle->forward($opts{side});
        $style->line(
            id => "line-$count",
            x1 => $line[0],
            y1 => $line[1],
            x2 => $line[2],
            y2 => $line[3],
        );
        $count++;

        $turtle->right(60);
    }

    for my $spoke (1 .. 3) {
        $turtle->forward($short);
        $turtle->right(90);

        my @line = $turtle->forward($long);
        $style->line(
            id => "line-$count",
            x1 => $line[0],
            y1 => $line[1], 
            x2 => $line[2],
            y2 => $line[3],
        );
        $count++;

        $turtle->right(90);
        $turtle->forward($short);
        $turtle->right(60);
    }

    return $count;
}
